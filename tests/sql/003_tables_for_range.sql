create schema if not exists :testschema;

create table if not exists :testschema.prl
(
    id bigint not null generated by default as identity,
    loaded_at timestamp not null,
    state_code text not null,
    modified_at timestamp,
    f4 integer
)
PARTITION BY range (loaded_at);

alter table :testschema.prl add constraint prl_pk primary key (loaded_at, state_code, id);
alter table :testschema.prl add constraint f4_check check(f4 > 15);
create index prl_idx on :testschema.prl (f4);

-- Partition
create table :testschema.prl_p_2022_01 PARTITION OF :testschema.prl
       for values from ('2022-01-01') to ('2022-02-01') PARTITION BY list(state_code);

-- Subpartitions
create table :testschema.prl_p_2022_01_northwest PARTITION OF :testschema.prl_p_2022_01
       for values in ('OR', 'WA');
create table :testschema.prl_p_2022_01_southwest PARTITION OF :testschema.prl_p_2022_01
       for values in ('AZ', 'UT', 'NM');

-- Default partition
create table :testschema.prl_p_default PARTITION OF :testschema.prl default;

insert into :testschema.prl (loaded_at, state_code, f4)
select
        s as c1,
        (array['OR', 'WA', 'AZ', 'UT', 'NM'])[floor(random() * 5 + 1)] as c2,
        (random()*100+16)::int as c3
from
        generate_series(
                to_timestamp('2021-11-01', 'yyyy-mm-dd'),
                to_timestamp('2022-05-21', 'yyyy-mm-dd'),
                '4 days'::interval
        ) as t(s)
;


create table if not exists :testschema.prl_numeric
(
    id bigint not null generated by default as identity,
    type_numeric numeric(10, 5)
)
PARTITION BY range (type_numeric);

